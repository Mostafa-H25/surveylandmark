import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { TabsContent } from "@/components/ui/tabs";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { CircleSlash, Download } from "lucide-react";
import { ReportTypesEnum } from "@/constants/defaults";
import type { Report } from "@/types/interfaces";
import { useQuery } from "@tanstack/react-query";
import { getAllReportsApi } from "@/api/reports/get-all-reports.api";
import { useCallback } from "react";
import { formatDate } from "@/helpers/formatDate";
import {
  Empty,
  EmptyContent,
  EmptyDescription,
  EmptyHeader,
  EmptyMedia,
  EmptyTitle,
} from "@/components/ui/empty";
// import { financialReports } from "@/assets/data";

type Props = {
  // handleOpenGenerateDialog: (type: TReportTypes) => void;
  handleViewReport: (report: Report) => void;
  handleDownloadReport: (reportName: string, reportUrl: string) => void;
};
const FINANCIAL_REPORTS_QUERY_KEY = "financial_reports";

const FinancialTab = ({
  // handleOpenGenerateDialog,
  handleViewReport,
  handleDownloadReport,
}: Props) => {
  const { data: reports, isPending } = useQuery({
    queryKey: [FINANCIAL_REPORTS_QUERY_KEY],
    queryFn: () => getAllReportsApi(),
    select: useCallback((data: ReportsQueryResponse) => {
      return data.reports.map((report) => ({
        id: report.id,
        name: report.name,
        generatedAt: report.generatedAt,
        description: report.description,
        downloadUrl: report.downloadUrl,
        project: report.metadata.projectName,
        generatedBy: report.metadata.generatedBy,
      }));
    }, []),
  });
  if (isPending) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <div className="aspect-square h-full max-h-32 animate-spin rounded-full border-b-2 border-blue-600"></div>
      </div>
    );
  }
  return (
    <TabsContent value={ReportTypesEnum.FINANCIAL.value} className="space-y-6">
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>Financial Reports</CardTitle>
              <CardDescription>
                Budget analysis, revenue summaries, and financial statements
              </CardDescription>
            </div>
            {/* <Button
              onClick={() =>
                handleOpenGenerateDialog(ReportTypesEnum.FINANCIAL.value)
              }
              className="bg-blue-600 hover:bg-blue-700"
            >
              <FileText className="mr-2 size-4" />
              Generate Report
            </Button> */}
          </div>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="whitespace-nowrap">Report Name</TableHead>
                {/* <TableHead>Type</TableHead> */}
                <TableHead>Project</TableHead>
                <TableHead className="whitespace-nowrap">
                  Generated By
                </TableHead>
                <TableHead>Date</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {!reports?.length && (
                <Empty>
                  <EmptyHeader>
                    <EmptyMedia variant="icon">
                      <CircleSlash color="#4a5565 " />
                    </EmptyMedia>
                    <EmptyTitle>No data</EmptyTitle>
                    <EmptyDescription>No data found</EmptyDescription>
                  </EmptyHeader>
                  <EmptyContent>{/* <Button>Add data</Button> */}</EmptyContent>
                </Empty>
              )}
              {reports?.map((report) => (
                <TableRow key={report.id}>
                  <TableCell className="font-medium">{report.name}</TableCell>
                  {/* <TableCell>{report?.type}</TableCell> */}
                  <TableCell>{report.project}</TableCell>
                  <TableCell>{report.generatedBy}</TableCell>
                  <TableCell>{formatDate(report.generatedAt)}</TableCell>
                  <TableCell>
                    <div className="flex gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        className="cursor-pointer"
                        onClick={() => handleViewReport(report)}
                      >
                        View
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() =>
                          handleDownloadReport(report.name, report.downloadUrl)
                        }
                        className="cursor-pointer"
                      >
                        <Download className="size-4" />
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </TabsContent>
  );
};

export default FinancialTab;

type ReportsQueryResponse = {
  message: string;
  success: boolean;
  reports: {
    id: string;
    name: string;
    generatedAt: string;
    description: string;
    downloadUrl: string;
    project: {
      id: string;
      name: string;
      status: string;
    };
    metadata: {
      projectName: string;
      generatedBy: string;
    };
  }[];
};
