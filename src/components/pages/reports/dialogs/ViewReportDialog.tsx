import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import type { Dispatch, SetStateAction } from "react";
import { Button } from "@/components/ui/button";
import { Download } from "lucide-react";
import type { Report } from "@/types/interfaces";
import { formatDate } from "@/helpers/formatDate";

type Props = {
  selectedReport: Report | null;
  openViewDialog: boolean;
  setOpenViewDialog: Dispatch<SetStateAction<boolean>>;
  handleDownloadReport: (reportName: string, reportUrl: string) => void;
};

const ViewReportDialog = ({
  selectedReport,
  openViewDialog,
  setOpenViewDialog,
  handleDownloadReport,
}: Props) => {
  if (!selectedReport) return;
  return (
    <Dialog open={openViewDialog} onOpenChange={setOpenViewDialog}>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle>Report Details</DialogTitle>
          <DialogDescription>
            Viewing report information and summary.
          </DialogDescription>
        </DialogHeader>
        {selectedReport && (
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium text-gray-700">
                  Report Name
                </label>
                <p className="text-sm text-gray-900">{selectedReport.name}</p>
              </div>
              <div>
                {/* <label className="text-sm font-medium text-gray-700">
                  Type
                </label>
                <p className="text-sm text-gray-900">{selectedReport.type}</p> */}
              </div>
              <div>
                <label className="text-sm font-medium text-gray-700">
                  Generated By
                </label>
                <p className="text-sm text-gray-900">
                  {selectedReport.generatedBy}
                </p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-700">
                  Date
                </label>
                <p className="text-sm text-gray-900">
                  {formatDate(selectedReport.generatedAt)}
                </p>
              </div>
              {selectedReport.project && (
                <div>
                  <label className="text-sm font-medium text-gray-700">
                    Project
                  </label>
                  <p className="text-sm text-gray-900">
                    {selectedReport.project}
                  </p>
                </div>
              )}
              {/* {selectedReport.period && (
                <div>
                  <label className="text-sm font-medium text-gray-700">
                    Period
                  </label>
                  <p className="text-sm text-gray-900">
                    {selectedReport.period}
                  </p>
                </div>
              )}
              {selectedReport.amount && (
                <div>
                  <label className="text-sm font-medium text-gray-700">
                    Amount
                  </label>
                  <p className="text-sm text-gray-900">
                    ${selectedReport.amount.toLocaleString()}
                  </p>
                </div>
              )}
              {selectedReport.unitsTotal && (
                <>
                  <div>
                    <label className="text-sm font-medium text-gray-700">
                      Total Units
                    </label>
                    <p className="text-sm text-gray-900">
                      {selectedReport.unitsTotal}
                    </p>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-gray-700">
                      Units Sold
                    </label>
                    <p className="text-sm text-gray-900">
                      {selectedReport.unitsSold}
                    </p>
                  </div>
                </>
              )}
              {selectedReport.totalItems && (
                <>
                  <div>
                    <label className="text-sm font-medium text-gray-700">
                      Total Items
                    </label>
                    <p className="text-sm text-gray-900">
                      {selectedReport.totalItems}
                    </p>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-gray-700">
                      Low Stock Items
                    </label>
                    <p
                      className={`text-sm ${
                        selectedReport.lowStock > 10
                          ? "font-medium text-red-600"
                          : "text-green-600"
                      }`}
                    >
                      {selectedReport.lowStock}
                    </p>
                  </div>
                </>
              )} */}
            </div>
            <div>
              <label className="text-sm font-medium text-gray-700">
                Summary
              </label>
              <p className="mt-1 text-sm text-gray-600">
                {selectedReport.description}
              </p>
            </div>
          </div>
        )}
        <DialogFooter>
          <Button variant="outline" onClick={() => setOpenViewDialog(false)}>
            Close
          </Button>
          {selectedReport && (
            <Button
              onClick={() =>
                handleDownloadReport(
                  selectedReport.name,
                  selectedReport.downloadUrl,
                )
              }
            >
              <Download className="mr-2 size-4" />
              Download Report
            </Button>
          )}
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default ViewReportDialog;
